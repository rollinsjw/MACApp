<<<<<<< HEAD
import React, { Component } from 'react';
=======
import * as React from 'react';
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
import { NativeModules } from 'react-native';

import CardStack from './CardStack';
import CardStackStyleInterpolator from './CardStackStyleInterpolator';
import Transitioner from '../Transitioner';
import TransitionConfigs from './TransitionConfigs';

const NativeAnimatedModule = NativeModules && NativeModules.NativeAnimatedModule;

<<<<<<< HEAD
class CardStackTransitioner extends Component {
=======
class CardStackTransitioner extends React.Component {
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7

  static defaultProps = {
    mode: 'card'
  };

  render() {
<<<<<<< HEAD
    return <Transitioner configureTransition={this._configureTransition} navigation={this.props.navigation} render={this._render} style={this.props.style} onTransitionStart={this.props.onTransitionStart} onTransitionEnd={this.props.onTransitionEnd} />;
=======
    return <Transitioner configureTransition={this._configureTransition} navigation={this.props.navigation} render={this._render} onTransitionStart={this.props.onTransitionStart} onTransitionEnd={this.props.onTransitionEnd} />;
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
  }

  _configureTransition = (
  // props for the new screen
  transitionProps, prevTransitionProps) => {
    const isModal = this.props.mode === 'modal';
    // Copy the object so we can assign useNativeDriver below
    // (avoid Flow error, transitionSpec is of type NavigationTransitionSpec).
    const transitionSpec = {
      ...TransitionConfigs.getTransitionConfig(this.props.transitionConfig, transitionProps, prevTransitionProps, isModal).transitionSpec
    };
    if (!!NativeAnimatedModule &&
    // Native animation support also depends on the transforms used:
    CardStackStyleInterpolator.canUseNativeDriver()) {
      // Internal undocumented prop
      transitionSpec.useNativeDriver = true;
    }
    return transitionSpec;
  };

  _render = props => {
    const {
      screenProps,
      headerMode,
      mode,
      router,
      cardStyle,
<<<<<<< HEAD
      transitionConfig,
      style
    } = this.props;
    return <CardStack screenProps={screenProps} headerMode={headerMode} mode={mode} router={router} cardStyle={cardStyle} transitionConfig={transitionConfig} style={style} {...props} />;
=======
      transitionConfig
    } = this.props;
    return <CardStack screenProps={screenProps} headerMode={headerMode} mode={mode} router={router} cardStyle={cardStyle} transitionConfig={transitionConfig} {...props} />;
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
  };
}

export default CardStackTransitioner;