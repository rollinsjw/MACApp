import { I18nManager } from 'react-native';

<<<<<<< HEAD
=======
import getSceneIndicesForInterpolationInputRange from '../../utils/getSceneIndicesForInterpolationInputRange';

>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
/**
 * Utility that builds the style for the navigation header.
 *
 * +-------------+-------------+-------------+
 * |             |             |             |
 * |    Left     |   Title     |   Right     |
 * |  Component  |  Component  | Component   |
 * |             |             |             |
 * +-------------+-------------+-------------+
 */

function forLeft(props) {
<<<<<<< HEAD
  const { position, scene } = props;
  const { index } = scene;
  return {
    opacity: position.interpolate({
      inputRange: [index - 1, index - 0.5, index, index + 0.5, index + 1],
=======
  const { position, scene, scenes } = props;
  const interpolate = getSceneIndicesForInterpolationInputRange(props);

  if (!interpolate) return { opacity: 0 };

  const { first, last } = interpolate;
  const index = scene.index;

  return {
    opacity: position.interpolate({
      inputRange: [first, first + Math.abs(index - first) / 2, index, last - Math.abs(last - index) / 2, last],
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
      outputRange: [0, 0, 1, 0, 0]
    })
  };
}

function forCenter(props) {
  const { position, scene } = props;
<<<<<<< HEAD
  const { index } = scene;
  return {
    opacity: position.interpolate({
      inputRange: [index - 1, index, index + 1],
=======
  const interpolate = getSceneIndicesForInterpolationInputRange(props);

  if (!interpolate) return { opacity: 0 };

  const { first, last } = interpolate;
  const index = scene.index;
  const inputRange = [first, index, last];

  return {
    opacity: position.interpolate({
      inputRange,
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
      outputRange: [0, 1, 0]
    }),
    transform: [{
      translateX: position.interpolate({
<<<<<<< HEAD
        inputRange: [index - 1, index + 1],
        outputRange: I18nManager.isRTL ? [-200, 200] : [200, -200]
=======
        inputRange,
        outputRange: I18nManager.isRTL ? [-200, 0, 200] : [200, 0, -200]
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
      })
    }]
  };
}

function forRight(props) {
  const { position, scene } = props;
<<<<<<< HEAD
  const { index } = scene;
  return {
    opacity: position.interpolate({
      inputRange: [index - 1, index, index + 1],
=======
  const interpolate = getSceneIndicesForInterpolationInputRange(props);

  if (!interpolate) return { opacity: 0 };
  const { first, last } = interpolate;
  const index = scene.index;

  return {
    opacity: position.interpolate({
      inputRange: [first, index, last],
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
      outputRange: [0, 1, 0]
    })
  };
}

export default {
  forLeft,
  forCenter,
  forRight
};