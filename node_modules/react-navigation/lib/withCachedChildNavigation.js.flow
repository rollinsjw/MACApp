/* @flow */

<<<<<<< HEAD
import React, { PureComponent } from 'react';

import addNavigationHelpers from './addNavigationHelpers';

import type { NavigationScreenProp, NavigationAction } from './TypeDefinition';

type InjectedProps<N> = {
  childNavigationProps: {
    [key: string]: N,
=======
import * as React from 'react';

import addNavigationHelpers from './addNavigationHelpers';

import type {
  NavigationScreenProp,
  NavigationState,
  NavigationRoute,
} from './TypeDefinition';

type InputProps<S: NavigationState> = {
  navigation: NavigationScreenProp<S>,
};
type OutputProps = {
  childNavigationProps: {
    +[key: string]: NavigationScreenProp<NavigationRoute>,
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
  },
};

/**
 * HOC which caches the child navigation items.
 */
<<<<<<< HEAD
export default function withCachedChildNavigation<T: *, N: *>(
  Comp: ReactClass<T & InjectedProps<N>>
): ReactClass<T> {
  return class extends PureComponent {
    static displayName = `withCachedChildNavigation(${Comp.displayName ||
      Comp.name})`;

    props: T;
=======
export default function withCachedChildNavigation<
  S: NavigationState,
  T: InputProps<S>
>(Comp: React.ComponentType<OutputProps & T>): React.ComponentType<T> {
  const displayName: string = Comp.displayName || Comp.name;
  return class extends React.PureComponent<T> {
    static displayName = `withCachedChildNavigation(${displayName})`;
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7

    componentWillMount() {
      this._updateNavigationProps(this.props.navigation);
    }

    componentWillReceiveProps(nextProps: T) {
      this._updateNavigationProps(nextProps.navigation);
    }

    _childNavigationProps: {
<<<<<<< HEAD
      [key: string]: NavigationScreenProp<N, NavigationAction>,
    };

    _updateNavigationProps = (
      navigation: NavigationScreenProp<N, NavigationAction>
=======
      [key: string]: NavigationScreenProp<NavigationRoute>,
    };

    _updateNavigationProps = (
      navigation: NavigationScreenProp<NavigationState>
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
    ) => {
      // Update props for each child route
      if (!this._childNavigationProps) {
        this._childNavigationProps = {};
      }
      navigation.state.routes.forEach((route: *) => {
        const childNavigation = this._childNavigationProps[route.key];
        if (childNavigation && childNavigation.state === route) {
          return;
        }
        this._childNavigationProps[route.key] = addNavigationHelpers({
<<<<<<< HEAD
          ...navigation,
=======
          dispatch: navigation.dispatch,
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
          state: route,
        });
      });
    };

    render() {
      return (
        <Comp
          {...this.props}
          childNavigationProps={this._childNavigationProps}
        />
      );
    }
  };
}
