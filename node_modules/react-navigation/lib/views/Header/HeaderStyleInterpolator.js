'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactNative = require('react-native');

<<<<<<< HEAD
=======
var _getSceneIndicesForInterpolationInputRange = require('../../utils/getSceneIndicesForInterpolationInputRange');

var _getSceneIndicesForInterpolationInputRange2 = _interopRequireDefault(_getSceneIndicesForInterpolationInputRange);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
/**
 * Utility that builds the style for the navigation header.
 *
 * +-------------+-------------+-------------+
 * |             |             |             |
 * |    Left     |   Title     |   Right     |
 * |  Component  |  Component  | Component   |
 * |             |             |             |
 * +-------------+-------------+-------------+
 */

function forLeft(props) {
  var position = props.position,
<<<<<<< HEAD
      scene = props.scene;
=======
      scene = props.scene,
      scenes = props.scenes;

  var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);

  if (!interpolate) return { opacity: 0 };

  var first = interpolate.first,
      last = interpolate.last;

>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
  var index = scene.index;

  return {
    opacity: position.interpolate({
<<<<<<< HEAD
      inputRange: [index - 1, index - 0.5, index, index + 0.5, index + 1],
=======
      inputRange: [first, first + Math.abs(index - first) / 2, index, last - Math.abs(last - index) / 2, last],
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
      outputRange: [0, 0, 1, 0, 0]
    })
  };
}

function forCenter(props) {
  var position = props.position,
      scene = props.scene;
<<<<<<< HEAD
  var index = scene.index;

  return {
    opacity: position.interpolate({
      inputRange: [index - 1, index, index + 1],
=======

  var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);

  if (!interpolate) return { opacity: 0 };

  var first = interpolate.first,
      last = interpolate.last;

  var index = scene.index;
  var inputRange = [first, index, last];

  return {
    opacity: position.interpolate({
      inputRange: inputRange,
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
      outputRange: [0, 1, 0]
    }),
    transform: [{
      translateX: position.interpolate({
<<<<<<< HEAD
        inputRange: [index - 1, index + 1],
        outputRange: _reactNative.I18nManager.isRTL ? [-200, 200] : [200, -200]
=======
        inputRange: inputRange,
        outputRange: _reactNative.I18nManager.isRTL ? [-200, 0, 200] : [200, 0, -200]
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
      })
    }]
  };
}

function forRight(props) {
  var position = props.position,
      scene = props.scene;
<<<<<<< HEAD
=======

  var interpolate = (0, _getSceneIndicesForInterpolationInputRange2.default)(props);

  if (!interpolate) return { opacity: 0 };
  var first = interpolate.first,
      last = interpolate.last;

>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
  var index = scene.index;

  return {
    opacity: position.interpolate({
<<<<<<< HEAD
      inputRange: [index - 1, index, index + 1],
=======
      inputRange: [first, index, last],
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
      outputRange: [0, 1, 0]
    })
  };
}

exports.default = {
  forLeft: forLeft,
  forCenter: forCenter,
  forRight: forRight
};