/* @flow */

<<<<<<< HEAD
import React, { PureComponent } from 'react';
=======
import * as React from 'react';
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
import { StyleSheet, View } from 'react-native';

import withCachedChildNavigation from '../../withCachedChildNavigation';
import NavigationActions from '../../NavigationActions';
<<<<<<< HEAD
=======
import invariant from '../../utils/invariant';

import SafeAreaView from '../SafeAreaView';
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7

import type {
  NavigationScreenProp,
  NavigationRoute,
<<<<<<< HEAD
  NavigationAction,
=======
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
  NavigationRouter,
  NavigationDrawerScreenOptions,
  NavigationState,
  NavigationStateRoute,
  ViewStyleProp,
} from '../../TypeDefinition';

import type { DrawerScene, DrawerItem } from './DrawerView';

<<<<<<< HEAD
type Navigation = NavigationScreenProp<NavigationStateRoute, NavigationAction>;

type Props = {
  router: NavigationRouter<
    NavigationState,
    NavigationAction,
    NavigationDrawerScreenOptions
  >,
  navigation: Navigation,
  childNavigationProps: { [key: string]: Navigation },
  contentComponent: ReactClass<*>,
  contentOptions?: {},
  screenProps?: {},
  style?: ViewStyleProp,
=======
type Props = {
  router: NavigationRouter<NavigationState, NavigationDrawerScreenOptions>,
  navigation: NavigationScreenProp<NavigationStateRoute>,
  childNavigationProps: {
    [key: string]: NavigationScreenProp<NavigationRoute>,
  },
  contentComponent: ?React.ComponentType<*>,
  contentOptions?: {},
  screenProps?: {},
  style?: ViewStyleProp,
  drawerPosition?: 'left' | 'right',
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
};

/**
 * Component that renders the sidebar screen of the drawer.
 */
<<<<<<< HEAD
class DrawerSidebar extends PureComponent<void, Props, void> {
=======
class DrawerSidebar extends React.PureComponent<Props> {
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
  props: Props;

  _getScreenOptions = (routeKey: string) => {
    const DrawerScreen = this.props.router.getComponentForRouteName(
      'DrawerClose'
    );
<<<<<<< HEAD
=======
    invariant(
      DrawerScreen.router,
      'NavigationComponent with routeName DrawerClose should be a Navigator'
    );
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
    const { [routeKey]: childNavigation } = this.props.childNavigationProps;
    return DrawerScreen.router.getScreenOptions(
      childNavigation.state.index !== undefined // if the child screen is a StackRouter then always show the screen options of its first screen (see #1914)
        ? {
            ...childNavigation,
            state: { ...childNavigation.state, index: 0 },
          }
        : childNavigation,
      this.props.screenProps
    );
  };

  _getLabel = ({ focused, tintColor, route }: DrawerScene) => {
    const { drawerLabel, title } = this._getScreenOptions(route.key);
    if (drawerLabel) {
      return typeof drawerLabel === 'function'
        ? drawerLabel({ tintColor, focused })
        : drawerLabel;
    }

    if (typeof title === 'string') {
      return title;
    }

    return route.routeName;
  };

  _renderIcon = ({ focused, tintColor, route }: DrawerScene) => {
    const { drawerIcon } = this._getScreenOptions(route.key);
    if (drawerIcon) {
      return typeof drawerIcon === 'function'
        ? drawerIcon({ tintColor, focused })
        : drawerIcon;
    }
    return null;
  };

  _onItemPress = ({ route, focused }: DrawerItem) => {
    this.props.navigation.navigate('DrawerClose');
    if (!focused) {
      let subAction;
      // if the child screen is a StackRouter then always navigate to its first screen (see #1914)
      if (route.index !== undefined && route.index !== 0) {
        route = ((route: any): NavigationStateRoute);
        subAction = NavigationActions.navigate({
          routeName: route.routes[0].routeName,
        });
      }
      this.props.navigation.navigate(route.routeName, undefined, subAction);
    }
  };

  render() {
    const ContentComponent = this.props.contentComponent;
<<<<<<< HEAD
    const { state } = this.props.navigation;
=======
    if (!ContentComponent) {
      return null;
    }
    const { state } = this.props.navigation;
    invariant(typeof state.index === 'number', 'should be set');
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
    return (
      <View style={[styles.container, this.props.style]}>
        <ContentComponent
          {...this.props.contentOptions}
          navigation={this.props.navigation}
          items={state.routes}
          activeItemKey={
<<<<<<< HEAD
            state.routes[state.index] && state.routes[state.index].key
=======
            state.routes[state.index] ? state.routes[state.index].key : null
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
          }
          screenProps={this.props.screenProps}
          getLabel={this._getLabel}
          renderIcon={this._renderIcon}
          onItemPress={this._onItemPress}
          router={this.props.router}
<<<<<<< HEAD
=======
          drawerPosition={this.props.drawerPosition}
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
        />
      </View>
    );
  }
}

export default withCachedChildNavigation(DrawerSidebar);

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});
