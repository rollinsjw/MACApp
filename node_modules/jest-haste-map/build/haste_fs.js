<<<<<<< HEAD
'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _path;
=======
'use strict';
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7











<<<<<<< HEAD
function _load_path() {return _path = _interopRequireDefault(require('path'));}var _micromatch;
function _load_micromatch() {return _micromatch = _interopRequireDefault(require('micromatch'));}var _constants;
function _load_constants() {return _constants = _interopRequireDefault(require('./constants'));}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
=======

var _path = require('path');var _path2 = _interopRequireDefault(_path);
var _micromatch = require('micromatch');var _micromatch2 = _interopRequireDefault(_micromatch);
var _constants = require('./constants');var _constants2 = _interopRequireDefault(_constants);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7

class HasteFS {


  constructor(files) {
    this._files = files;
  }

  getModuleName(file) {
<<<<<<< HEAD
    return this._files[file] && this._files[file][(_constants || _load_constants()).default.ID] || null;
  }

  getDependencies(file) {
    return this._files[file] && this._files[file][(_constants || _load_constants()).default.DEPENDENCIES] || null;
=======
    return this._files[file] && this._files[file][_constants2.default.ID] || null;
  }

  getDependencies(file) {
    return this._files[file] && this._files[file][_constants2.default.DEPENDENCIES] || null;
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
  }

  exists(file) {
    return !!this._files[file];
  }

  getAllFiles() {
    return Object.keys(this._files);
  }

  matchFiles(pattern) {
    if (!(pattern instanceof RegExp)) {
      pattern = new RegExp(pattern);
    }
    const files = [];
    for (const file in this._files) {
      if (pattern.test(file)) {
        files.push(file);
      }
    }
    return files;
  }

  matchFilesWithGlob(globs, root) {
    const files = new Set();
    for (const file in this._files) {
<<<<<<< HEAD
      const filePath = root ? (_path || _load_path()).default.relative(root, file) : file;
      if ((0, (_micromatch || _load_micromatch()).default)([filePath], globs).length) {
=======
      const filePath = root ? _path2.default.relative(root, file) : file;
      if ((0, _micromatch2.default)([filePath], globs).length) {
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
        files.add(file);
      }
    }
    return files;
<<<<<<< HEAD
  }}exports.default = HasteFS; /**
                                * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
                                *
                                * This source code is licensed under the MIT license found in the
                                * LICENSE file in the root directory of this source tree.
                                *
                                * 
                                */
=======
  }} /**
      * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
      *
      * This source code is licensed under the BSD-style license found in the
      * LICENSE file in the root directory of this source tree. An additional grant
      * of patent rights can be found in the PATENTS file in the same directory.
      *
      * 
      */module.exports = HasteFS;
>>>>>>> a622a84fa9b65a4b43e8645addefe35ee1624fe7
